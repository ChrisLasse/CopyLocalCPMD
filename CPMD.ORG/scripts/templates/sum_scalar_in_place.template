subroutine mp_sum_in_place_${NAME}(data,comm)
#ifdef __PARALLEL
  use mpi
#endif
  implicit none
  ! Arguments
  integer, intent(in) :: comm
  ${TYPE}${KIND}, intent(inout) :: data
  ! Variables
  character(*),parameter :: procedureN='mp_sum_in_place_${NAME}'
#ifdef __PARALLEL
  integer :: ierr
  integer,save :: size
  logical :: first=.true.
  real(real_8) :: tim1,tim2
  ${TYPE}${KIND} :: stack_buff
  if (first) then
    call mpi_type_size(${MPI_TYPE},size,ierr)
    first=.false.
  end if
  cmcal(ipar_gsum)=cmcal(ipar_gsum)+1.0d0
  cmlen(ipar_gsum)=cmlen(ipar_gsum)+${MPI_LEN}*size
  tim1=m_walltime()      
  call mpi_allreduce(data,stack_buff,1,${MPI_TYPE},&
         MPI_SUM,comm,ierr)
  call mp_mpi_error_assert(ierr,procedureN,__LINE__,__FILE__)
  data=stack_buff
  tim2=m_walltime()
  cmtim(ipar_gsum)=cmtim(ipar_gsum)+tim2-tim1
#endif
end subroutine mp_sum_in_place_${NAME}
