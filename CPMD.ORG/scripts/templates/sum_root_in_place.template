subroutine mp_sum_root_in_place_${NAME}(data,${ARG_LEN_NAME} root, comm)
#ifdef __PARALLEL
  use mpi
#endif
  use para_global, only : para_use_mpi_in_place
  use para_global, only : para_buff_size
  use para_global, only : para_stack_buff_size
  implicit none
  ! Arguments
  integer, intent(in) :: ${ARG_LEN_NAME} root, comm
  ${TYPE}${KIND}, intent(inout) ${DIMENSION} :: data
  ! Variables
  character(*),parameter :: procedureN='mp_sum_in_place_${NAME}'
  integer :: ierr,m,i,stat,buff_size,me
  integer,save :: size
  logical :: first=.true.
  real(real_8) :: tim1,tim2
  ${TYPE}${KIND},dimension(:),allocatable :: buff
  ${TYPE}${KIND},dimension(para_stack_buff_size) :: stack_buff
#ifdef __PARALLEL
  if (first) then
    call mpi_type_size(${MPI_TYPE},size,ierr)
    first=.false.
  end if
  cmcal(ipar_gsum)=cmcal(ipar_gsum)+1.0d0
  cmlen(ipar_gsum)=cmlen(ipar_gsum)+${MPI_LEN}*size
  tim1=m_walltime()      
  if (${MPI_LEN}<=para_stack_buff_size) then
    call mpi_reduce(data,stack_buff,${MPI_LEN},${MPI_TYPE},&
         MPI_SUM,root,comm,ierr)
    call mp_mpi_error_assert(ierr,procedureN,__LINE__,__FILE__)
    data(${COPY}1:${MPI_LEN})=stack_buff(1:${MPI_LEN})
  else
    if (para_use_mpi_in_place) then
      call mpi_comm_rank(comm,me, ierr)
      call mp_mpi_error_assert(ierr,procedureN,__LINE__,__FILE__)
      if (root.eq.me) THEN
        call mpi_reduce(MPI_IN_PLACE,data,${MPI_LEN},${MPI_TYPE},&
               MPI_SUM,root,comm,ierr)
      else
        call mpi_reduce(data,data,${MPI_LEN},${MPI_TYPE},&
               MPI_SUM,root,comm,ierr)
      end if
      call mp_mpi_error_assert(ierr,procedureN,__LINE__,__FILE__)
    else
      buff_size=min(${MPI_LEN},para_buff_size)
      allocate(buff(buff_size),stat=stat)
      if (stat.ne.0) call stopgm(procedureN,'allocation problem',& 
           __LINE__,__FILE__)
      do i=1,${MPI_LEN},buff_size
        m=min(buff_size,${MPI_LEN}-i+1)
        call mpi_reduce(data(${COPY}i),buff,m,${MPI_TYPE},&
             MPI_SUM,root,comm,ierr)
        call mp_mpi_error_assert(ierr,procedureN,__LINE__,__FILE__)
        data(${COPY}i:i+m-1)=buff(1:m)
      enddo
      deallocate(buff,stat=stat)
      if (stat.ne.0) call stopgm(procedureN,'deallocation problem',&
           __LINE__,__FILE__)
    endif
  endif
  tim2=m_walltime()
  cmtim(ipar_gsum)=cmtim(ipar_gsum)+tim2-tim1
#endif
end subroutine mp_sum_root_in_place_${NAME}
