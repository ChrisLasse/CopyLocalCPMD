subroutine mp_send_${NAME}(data,${ARG_LEN_NAME} dest,tag,comm)
  ! Arguments 
#ifdef __PARALLEL
  integer, intent(in) :: ${ARG_LEN_NAME} dest,tag
  type(MPI_COMM), intent(in) :: comm
#else
  integer, intent(in) :: ${ARG_LEN_NAME} dest,tag,comm
#endif
  ${TYPE}${KIND}, intent(in) ${DIMENSION} :: data
  ! Variables
  integer :: ierr
  real(real_8) :: tim1,tim2
  character(*),parameter::procedureN='mp_isend_${NAME}'
#ifdef __PARALLEL
  cmcal(ipar_send)=cmcal(ipar_send)+1.0d0
  cmlen(ipar_send)=cmlen(ipar_send)+${MPI_LEN}*${SIZE_IN_BYTES}
  tim1=m_walltime()
  call mpi_send(data,${MPI_LEN},${MPI_TYPE},dest,tag,comm,ierr)
  call mp_mpi_error_assert(ierr,procedureN,__LINE__,__FILE__)
  tim2=m_walltime()
  cmtim(ipar_send)=cmtim(ipar_send)+tim2-tim1
#endif
end subroutine mp_send_${NAME}

subroutine mp_recv_${NAME}(data,${ARG_LEN_NAME} src,tag,comm)
  use pstat
  ! Arguments
#ifdef __PARALLEL
  integer, intent(in) :: ${ARG_LEN_NAME} src,tag
  type(MPI_COMM), intent(in) :: comm
#else
  integer, intent(in) :: ${ARG_LEN_NAME} src,tag,comm
#endif
  ${TYPE}${KIND}, intent(out) ${DIMENSION} :: data
  ! Variables
  integer :: ierr
  real(real_8) :: tim1,tim2
  character(*),parameter::procedureN='mp_recv_${NAME}'
#ifdef __PARALLEL
  cmcal(ipar_send)=cmcal(ipar_send)+1.0d0
  cmlen(ipar_send)=cmlen(ipar_send)+${MPI_LEN}*${SIZE_IN_BYTES}
  tim1=m_walltime()
  call mpi_recv(data,${MPI_LEN},${MPI_TYPE},src,tag,comm,&
        MPI_STATUS_IGNORE,ierr)
  call mp_mpi_error_assert(ierr,procedureN,__LINE__,__FILE__)
  tim2=m_walltime()
  cmtim(ipar_send)=cmtim(ipar_send)+tim2-tim1
#endif
end subroutine mp_recv_${NAME}
