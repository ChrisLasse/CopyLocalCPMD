subroutine mp_sum_${NAME}(data_in,data_out,comm)
  ! Arguments
#ifdef __PARALLEL
  type(MPI_COMM), intent(in) :: comm
#else
  integer, intent(in) ::  comm
#endif
  ${TYPE}${KIND}, intent(in) :: data_in
  ${TYPE}${KIND}, intent(inout)  :: data_out
  ! Variables
  character(*),parameter :: procedureN='mp_sum_${NAME}'
#ifdef __PARALLEL
  real(real_8) :: tim1,tim2
  integer :: ierr,count
  cmcal(ipar_gsum)=cmcal(ipar_gsum)+1.0d0
  cmlen(ipar_gsum)=cmlen(ipar_gsum)+${MPI_LEN}*${SIZE_IN_BYTES}
  tim1=m_walltime()      
  call mpi_allreduce(data_in,data_out,${MPI_LEN},${MPI_TYPE},&
       MPI_SUM,comm,ierr)
  call mp_mpi_error_assert(ierr,procedureN,__LINE__,__FILE__)
  tim2=m_walltime()
  cmtim(ipar_gsum)=cmtim(ipar_gsum)+tim2-tim1
#else
  data_out=data_in
#endif
end subroutine mp_sum_${NAME}
